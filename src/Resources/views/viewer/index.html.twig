{% extends '@LogViewer/base.html.twig' %}

{% block stylesheets %}
    <link href="https://cdn.datatables.net/1.13.1/css/jquery.dataTables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    
    <style>
        .toggle-checkbox:checked {
            @apply: right-0 border-green-400;
            right: 0;
            border-color: #68D391;
        }
        .toggle-checkbox:checked + .toggle-label {
            @apply: bg-green-400;
            background-color: #68D391;
        }
        
        td {
          	max-width:50px;
          	white-space: nowrap;
          	overflow: hidden;
          	text-overflow: ellipsis;
        }
        
        .redClass {
        	background-color: #ff05053b !important;
        }
        
        .yellowClass {
        	background-color: #f1cc003b !important;
        }
    </style>
{% endblock %}
{% block javascripts %}

    <script src="https://code.jquery.com/jquery-3.6.1.min.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js" type="text/javascript"></script>
    <script src="https://momentjs.com/downloads/moment.min.js" type="text/javascript"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    
    <script type="text/javascript">
    
    	$(document).ready(function() {
        	const logsTable = $('#logsTable');
        	const groupsConfig = logsTable.data('groups-config');
        	
        	const toggleFilter = document.querySelector('#toggle');
        	const toggleable = document.querySelectorAll('.toggleable');
        	const btnFilter = document.querySelector('#apply-filter');
        	const dateFilterInput = document.querySelector('#date-filter');
        	const fileFilterSelect = document.querySelector('#file-filter');
        	const levelFilterSelect = document.querySelector('#level-filter');
        
        	const textFormat = (value) => { return value; }
        	const jsonFormat = (value) => {
        		let formattedValue = JSON.parse(value);
        		if (typeof formattedValue === 'object' && !Array.isArray(formattedValue)) {
        			return '<pre>' + JSON.stringify(value) + '</pre>';
        		}
        		return '<pre>' + formattedValue + '</pre>';
        	}
        
        	const format = (value, type) => {
        		switch (type) {
        			case 'json': 
        				return jsonFormat(value);
        			case 'text':
        			default: 
        				return textFormat(value);
        		}
        	}
        	
        	const urlParams = {};
        	
        	if (dateFilterInput.value !== 'all') {
				let filterDate = new Date(dateFilterInput.value);
        		let filterMonth = ("0" + (filterDate.getMonth() + 1)).slice(-2);
        		urlParams.year = filterDate.getFullYear();
        		urlParams.month = filterMonth;
        		urlParams.day = filterDate.getDate();
        	}
        	
        	if(new URLSearchParams(window.location.search).has('level')) {
        		urlParams.level = new URLSearchParams(window.location.search).get('level');
        	}
        	
        	
        	const datatableOptions = {
        		scrollX: true,
        		processing: true,
        		serverSide: false,
        		deferLoading: 0,
        		search: {
        			caseInsensitive: true
        		},
        		asStripeClasses: [ '' ],
        		ajax: {
        			url: `${logsTable.data('remote-url')}?` + new URLSearchParams(urlParams),
        			dataSrc: '',
        			dataType: "json",
        			error: function(xhr, error, thrown) {
        				console.log(error)
        			}
        		},
        		language: {
        			processing: '<i class="fas fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span> '
        		},
        		order: [[0, "desc"]],
        		columnDefs: [
        			{ targets: "no-sort", orderable: false },
        			{ targets: 0, className: "border border-gray-400 whitespace-nowrap" },
        			{ targets: "_all", className: "border border-gray-400" }
        		],
        		columns: Object.keys(groupsConfig).map((groupName) => ({
    				data: groupName,
    				width: groupsConfig[groupName].width,
    				render: groupsConfig[groupName].type === 'date' ? DataTable.render.datetime('HH:mm:ss', 'it') : function(value) {
    					return format(value, groupsConfig[groupName].type)
    				}
            	})),
            	createdRow: function( row, data, dataIndex){
            		console.log(data);
            		if(data.level === 'ERROR' || data.level === 'CRITICAL' ) {
            			$(row).addClass('redClass');
            		} else if(data.level === 'WARNING') {
            			$(row).addClass('yellowClass');
            		}
            	}
        	};
        	
        	const logsDataTable = logsTable.DataTable(datatableOptions);
        	
        	// Click on row
        	$('#logsTable tbody').on('click', 'td', function () {
        		var data = logsDataTable.cell( this ).data();
        		
        		var newDiv = $(document.createElement('div')); 
				newDiv.html(data);
				newDiv.dialog({
  					width: $(window).width() * 0.8,
  					height: $(window).height() * 0.8,
  					modal: true
				});
    		} );
        
        	/* Toggle filters */
        
        	toggleFilter.addEventListener('change', function() {
        		if (this.checked) {
        			toggleable[0].classList.add('hidden');
        			toggleable[1].classList.remove('hidden');
        		} else {
        			toggleable[1].classList.add('hidden');
        			toggleable[0].classList.remove('hidden');
        		}
        	});
        
        	/* Apply filters */
        
        	btnFilter.addEventListener('click', function() {
        
        		var url = logsTable.data('remote-url');
        		if (toggleable[0].classList.contains('hidden')) {
        			let filterFile = fileFilterSelect.options[fileFilterSelect.selectedIndex].value;
        			url += '?file=' + filterFile;
        		} else {
        			if (dateFilterInput.value !== 'all') {
        				let filterDate = new Date(dateFilterInput.value);
        				let filterMonth = ("0" + (filterDate.getMonth() + 1)).slice(-2);
        				url += '?year=' + filterDate.getFullYear() + '&month=' + filterMonth + '&day=' + filterDate.getDate();
        			}
        			
        			url += '&level=' + levelFilterSelect.value;
        		}
        
        		logsDataTable.ajax.url(url).load();
        	});
        
        	/* Search */
        	const toggleCase = document.querySelector('#toggle-case');
        
        	toggleCase.addEventListener('change', function() {
        		datatableOptions.search.caseInsensitive = !this.checked;
        		dateFilterInput.selectedIndex = 0;
        		fileFilterSelect.selectedIndex = 0;
        		logsDataTable.destroy();
        		logsDataTable = logsTable.DataTable(datatableOptions);
        	});
        });
    </script>
    
{% endblock %}

{% block body %}
<div class="w-full mx-auto pt-20">

    <div class="w-full px-4 md:px-0 md:mt-8 mb-16 text-gray-800 leading-normal">

        {% include "@LogViewer/viewer/filters.html.twig" %}

        <div class="w-full px-4 md:px-0 mb-16 text-gray-800 leading-normal">

            <div class="flex flex-wrap">
                <div class="w-full p-3">
                
                    <!--Log Table-->
                    <div class="bg-white border rounded shadow p-2 text-sm">
                    
                        <table
                                id="logsTable"
                                class="display nowrap"
                                style="width: 100%;"
                                data-page-length="10"
                                data-remote-url="{{ path('kira_log_viewer.viewer.ajax') }}"
                                data-columns-names="{{ groups|keys|json_encode }}"
                                data-groups-config="{{ groups|json_encode }}"
                        >
                            <thead>
                                <tr>
                                    {% for key in groups|keys %}
                                    <th>{{ key|capitalize }}</th>
                                    {% endfor %}
                                </tr>
                            </thead>
                            <tbody>
                       </table>
                    </div>
                    <!--/Log Table-->
                </div>
            </div>

    </div>

</div>
{% endblock %}

{% block footer %}
{% endblock %}